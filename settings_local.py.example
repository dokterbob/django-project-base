# Load the default settings from settings_default.py
from settings_default import *

# Attempt to load 'secret' settings, containing (ie.) passwords
# from settings_secret.py - but fail silently if this is not possible.
try:
    from settings_secret import *
except ImportError:
    pass

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.mysql',
#         'NAME': '',
#         'USER': '',
#         'PASSWORD': '',
#         'HOST': '',
#         'PORT': ''
#     }
# }

# DEBUG = False


# Just append to the default value
# INSTALLED_APPS += [
# 	'my_little_app',
# ]


# Email settings
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
# EMAIL_HOST = ''
# DEFAULT_FROM_EMAIL = ''


# Cache settings
# CACHE_BACKEND = 'locmem://'
# CACHE_PREFIX = DJANGO_PROJECT
# CACHE_TIMEOUT = 60


# Enable debug_toolbar
# INSTALLED_APPS.append('debug_toolbar')
# MIDDLEWARE_CLASSES.append('debug_toolbar.middleware.DebugToolbarMiddleware')


# General logging
# No debuggin and log errors & warnings to sentry
# import logging
# logging.basicConfig(level=logging.WARNING,
#                     format='%(levelname)-8s %(message)s')


# Sentry logging
# from sentry.client.handlers import SentryHandler
# 
# logger = logging.getLogger()
# # ensure we havent already registered the handler
# if SentryHandler not in map(lambda x: x.__class__, logger.handlers):
#     logger.addHandler(SentryHandler())
# 
#     # Add StreamHandler to sentry's default so you can catch missed exceptions
#     logger = logging.getLogger('sentry.errors')
#     logger.propagate = False
#     logger.addHandler(logging.StreamHandler())
# 
# What should these site's errors by called in the log?
# SENTRY_NAME = 'www.mysite.com'
# Just one daily email
# ADMINS = ()
# SENTRY_ADMINS = (
#     ('emai'),
# )
# MANAGERS = SENTRY_ADMINS
